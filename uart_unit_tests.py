
import os
import random
import logging

from chiptools.testing.testloader import ChipToolsTest
log = logging.getLogger(__name__)


class UartTestBase(ChipToolsTest):
    duration = 0
    generics = {'baud': 115200}
    entity = 'tb_uart'
    library = 'lib_tb_uart'
    baud = 115200
    delay_ns = 0
    local_clock_frequency = 100e6
    remote_clock_frequency = 100e6

    def simulationSetUp(self):
        # calculate duration based on baud rate, (8bits/symbol + 3x margin)
        self.duration = (len(self.values) * 8 * 3) / self.baud
        self.generics = {
            'local_clock_hz': int(self.local_clock_frequency),
            'remote_clock_hz': int(self.local_clock_frequency),
            'baud': int(self.baud),
            'delay_ns': float(self.delay_ns)
        }
        self.input_path = os.path.join(self.simulation_root, 'input.txt')
        self.output_path = os.path.join(self.simulation_root, 'output.txt')
        # Write the values to the testbench input file
        with open(self.input_path, 'w') as f:
            for value in self.values:
                f.write('{0}\n'.format(bin(value)[2:].zfill(8)))

    def check_output(self, test_name='', fontsize=10):
        output_values = []
        with open(self.output_path, 'r') as f:
            data = f.readlines()
        for valueIdx, value in enumerate(data):
            # testbench response
            output_values.append(int(value, 2))  # Binary to integer

        # Compare the expected result to what the Testbench returned:
        self.assertListEqual(output_values, self.values)

    def simulationTearDown(self):
        # Remove files generated by the test
        os.remove(self.input_path)
        os.remove(self.output_path)


class uart_test_constant_0x00(UartTestBase):
    values = [0x00 for i in range(250)]

    def test_output(self):
        """Check UART with constant data: 0x00 @ 100MHz"""
        self.check_output()


class uart_test_constant_0xAA(UartTestBase):
    values = [0xAA for i in range(250)]

    def test_output(self):
        """Check UART with constant data: 0xAA @ 100MHz"""
        self.check_output()


class uart_test_constant_0x55(UartTestBase):
    values = [0x55 for i in range(250)]

    def test_output(self):
        """Check UART with constant data: 0x55 @ 100MHz"""
        self.check_output()


class uart_test_constant_0xFF(UartTestBase):
    values = [0xFF for i in range(250)]

    def test_output(self):
        """Check UART with constant data: 0xFF @ 100MHz"""
        self.check_output()


class uart_test_random_data_4800(UartTestBase):
    baud = 4800
    values = [random.randint(0, 2**8-1) for i in range(180)]

    def test_output(self):
        """Check UART with random data at 4800 BAUD @ 100MHz"""
        self.check_output()


class uart_test_random_data_115200(UartTestBase):
    baud = 115200
    values = [random.randint(0, 2**8-1) for i in range(250)]

    def test_output(self):
        """Check UART with random data at 115200 BAUD @ 100MHz"""
        self.check_output()


class uart_test_random_data_230400(UartTestBase):
    baud = 230400
    values = [random.randint(0, 2**8-1) for i in range(5000)]

    def test_output(self):
        """Check UART with random data at 230400 BAUD @ 100MHz"""
        self.check_output()


class uart_test_random_data_230400_300e6(UartTestBase):
    baud = 230400
    local_clock_frequency = 300e6
    remote_clock_frequency = local_clock_frequency
    values = [random.randint(0, 2**8-1) for i in range(5000)]

    def test_output(self):
        """Check UART with random data at 230400 BAUD using a 300MHz clock"""
        self.check_output()


class uart_test_random_data_230400_50e6(UartTestBase):
    baud = 230400
    local_clock_frequency = 50e6
    remote_clock_frequency = local_clock_frequency
    values = [random.randint(0, 2**8-1) for i in range(5000)]

    def test_output(self):
        """Check UART with random data at 230400 BAUD using a 50MHz clock"""
        self.check_output()


class uart_test_random_data_phase90(UartTestBase):
    baud = 115200
    local_clock_frequency = 100e6
    remote_clock_frequency = local_clock_frequency
    period = (1 / local_clock_frequency)
    delay_ns = (period * 0.25) / 1e-9
    values = [random.randint(0, 2**8-1) for i in range(700)]

    def test_output(self):
        """90deg phase offset on the local and remote clocks"""
        self.check_output()


class uart_test_random_data_phase180(UartTestBase):
    baud = 115200
    local_clock_frequency = 100e6
    remote_clock_frequency = local_clock_frequency
    period = (1 / local_clock_frequency)
    delay_ns = (period * 0.5) / 1e-9
    values = [random.randint(0, 2**8-1) for i in range(700)]

    def test_output(self):
        """180deg phase offset on the local and remote clocks"""
        self.check_output()


class uart_test_random_data_phase270(UartTestBase):
    baud = 115200
    local_clock_frequency = 100e6
    remote_clock_frequency = local_clock_frequency
    period = (1 / local_clock_frequency)
    delay_ns = (period * 0.75) / 1e-9
    values = [random.randint(0, 2**8-1) for i in range(700)]

    def test_output(self):
        """270deg phase offset on the local and remote clocks"""
        self.check_output()


class uart_local_clock_125e6_remote_clock_200e6(UartTestBase):
    baud = 230400
    local_clock_frequency = 125e6
    remote_clock_frequency = 200e6
    period = (1 / local_clock_frequency)
    delay_ns = (period * 0.75) / 1e-9
    values = [random.randint(0, 2**8-1) for i in range(2000)]

    def test_output(self):
        """Check UART with a 125MHz local clock and a 200MHz remote clock"""
        self.check_output()


class uart_local_clock_50e6_remote_clock_160e6(UartTestBase):
    baud = 230400
    local_clock_frequency = 50e6
    remote_clock_frequency = 160e6
    period = (1 / local_clock_frequency)
    delay_ns = (period * 0.75) / 1e-9
    values = [random.randint(0, 2**8-1) for i in range(2000)]

    def test_output(self):
        """Check UART with a 50MHz local clock and a 160MHz remote clock"""
        self.check_output()
