import os
from chiptools.testing.testloader import ChipToolsTest


class UartTestBase(ChipToolsTest):
    duration = 0
    generics = {'baud': 115200}
    entity = 'tb_uart'
    library = 'lib_tb_uart'
    baud = 115200
    delay_ns = 0
    local_clock_frequency = 100e6
    remote_clock_frequency = 100e6


def test_factory(
    local_clock_frequency,
    remote_clock_frequency,
    baud,
    phase_delay_ns,
    values,
    test_name,
    test_docstring='',
):

    def test_output(self):
        self.check_output()

    test_output.__doc__ = test_docstring

    def simulationSetUp(self):
        self.input_path = os.path.join(self.simulation_root, 'input.txt')
        self.output_path = os.path.join(self.simulation_root, 'output.txt')
        # Write the values to the testbench input file
        with open(self.input_path, 'w') as f:
            for value in self.values:
                f.write('{0}\n'.format(bin(value)[2:].zfill(8)))

    def check_output(self):
        output_values = []
        with open(self.output_path, 'r') as f:
            data = f.readlines()
        for valueIdx, value in enumerate(data):
            # testbench response
            output_values.append(int(value, 2))  # Binary to integer

        # Compare the expected result to what the Testbench returned:
        self.assertListEqual(output_values, self.values)

    def simulationTearDown(self):
        # Remove files generated by the test
        os.remove(self.input_path)
        os.remove(self.output_path)

    generics = {
        'delay_ns': float(phase_delay_ns),
        'baud': int(baud),
        'remote_clock_hz': int(remote_clock_frequency),
        'local_clock_hz': int(local_clock_frequency),
    }
    class_dict = {
        'generics': generics,
        'values': values,
        'simulationSetUp': simulationSetUp,
        'simulationTearDown': simulationTearDown,
        'check_output': check_output,
        'test_output': test_output,

    }
    cls = type(test_name, (UartTestBase,), class_dict)
    return cls


def generate_test(
    testsuite,
    loader,
    local_clock_frequency=100e6,
    remote_clock_frequency=100e6,
    baud=115200,
    phase_delay_ns=0,
    values=[],
    test_name="undefined test",
    test_docstring='',
):
    testsuite.addTests(
        loader.loadTestsFromTestCase(
            test_factory(
                local_clock_frequency,
                remote_clock_frequency,
                baud,
                phase_delay_ns,
                values,
                test_name,
                test_docstring=test_docstring,
            )
        )
    )
